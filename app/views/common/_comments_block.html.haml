.title= "комментарии (#{@comments.size})"
- if @comments.blank?
  %p.description= t("NO_COMMENTS_HERE")
  .clear
- else
  - @comments.each do |comment|
    .comment{class: "comment-#{comment._id}"}
      %table
        %tr
          %td.avatar
            = render 'common/avatar', user: comment.user
          %td.credentials
            .author
              = link_to profile_path(comment.user) do
                %span
                  %span= comment.user.name
            .publishDate
              = l comment.created_at.in_time_zone, format: :short
              - if defined? show_commentable
                %span.step
                  к
                  = link_to polymorphic_path(comment.commentable) do
                    %span= comment.commentable_correct_title
            .pull-right
              - if can? :update, comment
                = link_to edit_comment_path(comment) do
                  %i.fa.fa-pencil
              - if can? :destroy, comment
                = link_to comment, method: :delete, confirm: "#{t(:SURE)}" do
                  %i.fa.fa-trash-o
        %tr
          %td.votecell
            .vote-comment
              - if can? :vote_up, comment
                = link_to vote_up_comment_path(comment), remote: true do
                  = image_tag( '/images/votes/plus.png', :title => "Комментарий по делу")
              .count{:class => ((comment.votes_point > 0 ? 'positive' : 'negative') unless comment.votes_point ==0 )}
                =comment.votes_point
              - if can? :vote_down, comment
                = link_to vote_down_comment_path(comment), remote: true do
                  = image_tag( '/images/votes/minus.png', :title => "Комментарий не по сути")
          %td.contentcell
            = comment.content.html_safe

= paginate @comments, :remote => true